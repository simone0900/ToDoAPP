package org.example.view;

import org.example.controller.Controller;
import org.example.dao.UtenteDAO;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class LoginWindow {
    private JPanel panel1;
    private JTextField textUsername;
    private JPasswordField textPassword;
    private JButton loginButton;
    private JButton registratiButton;
    private JCheckBox mostraPasswordCheckBox;


    public LoginWindow() {


        loginButton.addActionListener(e -> {
            String user = textUsername.getText().trim();
            String pass = new String(textPassword.getPassword()).trim();
            if (Controller.login(user, pass)) {
                JOptionPane.showMessageDialog(null, "Login riuscito!");
                Controller.showBachecaWindow();
                SwingUtilities.invokeLater(Controller::mostraDialogRichieste);

            } else {
                JOptionPane.showMessageDialog(null, "Credenziali errate.");
            }
        });
        mostraPasswordCheckBox.addActionListener(e -> {
            if (mostraPasswordCheckBox.isSelected()) {
                textPassword.setEchoChar((char) 0); // mostra password
            } else {
                textPassword.setEchoChar('•'); // nasconde password
            }
        });


        // REGISTRAZIONE BUTTON ACTION
        registratiButton.addActionListener(e -> {
            String user = textUsername.getText().trim();
            String pass = new String(textPassword.getPassword()).trim();
            if (user.isEmpty() || pass.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Inserisci username e password.");
                return;
            }
            if (UtenteDAO.registraUtente(user, pass)) {
                JOptionPane.showMessageDialog(null, "Registrazione avvenuta con successo!");
            } else {
                JOptionPane.showMessageDialog(null, "Errore nella registrazione. Utente già esistente?");
            }
        });
    }

    public JPanel getPanel() {
        return panel1;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 20, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("JetBrains Mono", -1, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("USERNAME");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 20, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(71, 83), null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 24, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("PASSWORD");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 20, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textUsername = new JTextField();
        panel1.add(textUsername, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 20, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        mostraPasswordCheckBox = new JCheckBox();
        mostraPasswordCheckBox.setText("Mostra password");
        panel1.add(mostraPasswordCheckBox, new com.intellij.uiDesigner.core.GridConstraints(4, 19, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        registratiButton = new JButton();
        registratiButton.setText("REGISTRATI");
        panel1.add(registratiButton, new com.intellij.uiDesigner.core.GridConstraints(5, 13, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setText("LOGIN");
        panel1.add(loginButton, new com.intellij.uiDesigner.core.GridConstraints(5, 14, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textPassword = new JPasswordField();
        textPassword.setText("");
        panel1.add(textPassword, new com.intellij.uiDesigner.core.GridConstraints(4, 13, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
